#!/usr/bin/env ruby

require 'gtk4'
require 'cairo'

# –ü–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
class CustomTreeWidget < Gtk::Widget
  type_register

  class << self
    def init
      set_template resource: '/org/example/custom-tree.ui'
      bind_template_child 'scroll_area'
    end
  end

  def initialize
    super
    @items = []
    @selected_index = -1
    @scroll_offset = 0
    @item_height = 25
    @visible_items = 0
    
    setup_widget
    load_current_directory
  end

  private

  def setup_widget
    # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    @scroll_area = Gtk::ScrolledWindow.new
    @scroll_area.set_policy(:automatic, :automatic)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    @drawing_area = Gtk::DrawingArea.new
    @drawing_area.set_draw_func(method(:draw_tree))
    @drawing_area.set_size_request(250, 400)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
    @drawing_area.add_controller(create_mouse_controller)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    @drawing_area.add_controller(create_key_controller)
    
    @scroll_area.set_child(@drawing_area)
    self.set_child(@scroll_area)
  end

  def create_mouse_controller
    controller = Gtk::GestureClick.new
    controller.signal_connect("pressed") do |gesture, n_press, x, y|
      handle_mouse_click(x, y)
    end
    controller
  end

  def create_key_controller
    controller = Gtk::EventControllerKey.new
    controller.signal_connect("key-pressed") do |event_controller, keyval, keycode, state|
      handle_key_press(keyval, state)
    end
    controller
  end

  def handle_mouse_click(x, y)
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    adjusted_y = y + @scroll_offset
    index = (adjusted_y / @item_height).to_i
    
    if index >= 0 && index < @items.length
      @selected_index = index
      @drawing_area.queue_draw
      notify_selection_changed
    end
  end

  def handle_key_press(keyval, state)
    case keyval
    when Gdk::Keyval::KEY_Up
      @selected_index = [@selected_index - 1, 0].max
      @drawing_area.queue_draw
      notify_selection_changed
    when Gdk::Keyval::KEY_Down
      @selected_index = [@selected_index + 1, @items.length - 1].min
      @drawing_area.queue_draw
      notify_selection_changed
    when Gdk::Keyval::KEY_Return, Gdk::Keyval::KEY_KP_Enter
      activate_selected_item
    end
  end

  def draw_tree(widget, cr, width, height)
    # –û—á–∏—â–∞–µ–º —Ñ–æ–Ω
    cr.set_source_rgb(0.95, 0.95, 0.95)
    cr.paint
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    @visible_items = (height / @item_height).ceil
    
    # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    @items.each_with_index do |item, index|
      y = index * @item_height - @scroll_offset
      next if y + @item_height < 0 || y > height
      
      draw_item(cr, item, y, width, index == @selected_index)
    end
  end

  def draw_item(cr, item, y, width, selected)
    # –§–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–∞
    if selected
      cr.set_source_rgb(0.2, 0.5, 0.9)
    else
      cr.set_source_rgb(1.0, 1.0, 1.0)
    end
    cr.rectangle(0, y, width, @item_height)
    cr.fill
    
    # –ì—Ä–∞–Ω–∏—Ü–∞
    cr.set_source_rgb(0.8, 0.8, 0.8)
    cr.set_line_width(1)
    cr.rectangle(0, y, width, @item_height)
    cr.stroke
    
    # –¢–µ–∫—Å—Ç
    cr.set_source_rgb(0.0, 0.0, 0.0)
    cr.select_font_face("Sans", Cairo::FONT_SLANT_NORMAL, Cairo::FONT_WEIGHT_NORMAL)
    cr.set_font_size(12)
    
    # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    icon = item[:type] == :directory ? "üìÅ" : "üìÑ"
    if item[:name] == ".."
      icon = "‚¨ÜÔ∏è"
    end
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞
    cr.move_to(10, y + 15)
    cr.show_text(icon)
    
    cr.move_to(35, y + 15)
    cr.show_text(item[:name])
  end

  def load_current_directory
    @current_path = Dir.pwd
    refresh_items
  end

  def refresh_items
    @items.clear
    
    # –î–æ–±–∞–≤–ª—è–µ–º ".." –µ—Å–ª–∏ –Ω–µ –≤ –∫–æ—Ä–Ω–µ
    parent_path = File.dirname(@current_path)
    if parent_path != @current_path
      @items << { name: "..", path: "..", type: :parent }
    end
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    @items << { name: File.basename(@current_path), path: @current_path, type: :directory }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Dir.children(@current_path).sort.each do |entry|
      next if entry.start_with?('.')
      full_path = File.join(@current_path, entry)
      
      if File.directory?(full_path)
        @items << { name: entry, path: full_path, type: :directory }
      else
        @items << { name: entry, path: full_path, type: :file }
      end
    end
    
    @selected_index = -1
    @scroll_offset = 0
    @drawing_area.queue_draw
  end

  def activate_selected_item
    return if @selected_index < 0 || @selected_index >= @items.length
    
    item = @items[@selected_index]
    
    case item[:type]
    when :parent
      go_to_parent
    when :directory
      @current_path = item[:path]
      refresh_items
    when :file
      puts "Opening file: #{item[:path]}"
      # TODO: –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
    end
  end

  def go_to_parent
    parent_path = File.dirname(@current_path)
    return if parent_path == @current_path
    
    @current_path = parent_path
    refresh_items
  end

  def notify_selection_changed
    return if @selected_index < 0 || @selected_index >= @items.length
    
    item = @items[@selected_index]
    signal_emit("selection-changed", item[:path])
  end

  # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  def get_selected_path
    return nil if @selected_index < 0 || @selected_index >= @items.length
    @items[@selected_index][:path]
  end

  def refresh
    refresh_items
  end
end

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
CustomTreeWidget.signal_new("selection-changed", GObject::SIGNAL_RUN_LAST, nil, [String])

# –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Gtk::Application.new("org.example.custom-tree", :default_flags)

app.signal_connect "activate" do |application|
  win = Gtk::ApplicationWindow.new(application)
  win.set_title("Custom Tree Widget")
  win.set_default_size(400, 500)
  
  # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç
  tree = CustomTreeWidget.new
  
  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
  tree.signal_connect("selection-changed") do |widget, path|
    puts "Selected: #{path}"
  end
  
  # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  button = Gtk::Button.new(label: "Refresh")
  button.signal_connect("clicked") do
    tree.refresh
  end
  
  # Layout
  box = Gtk::Box.new(:vertical, 10)
  box.append(button)
  box.append(tree)
  
  win.set_child(box)
  win.present
end

puts "Starting Custom Tree Widget Test..."
app.run 