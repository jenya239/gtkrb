#!/usr/bin/env ruby

require_relative '../src/file_tree_adapter'
require_relative '../src/tree_view'

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockTreeDataSource < TreeDataSource
  def get_root_items
    [
      MockItem.new('test1', :directory),
      MockItem.new('test2', :file)
    ]
  end
  
  def get_children(item)
    []
  end
  
  def can_expand?(item)
    item.type == :directory
  end
end

class MockItem
  attr_reader :name, :type, :path
  
  def initialize(name, type)
    @name = name
    @type = type
    @path = "/mock/#{name}"
  end
  
  def directory?
    @type == :directory
  end
  
  def file?
    @type == :file
  end
  
  def can_expand?
    directory?
  end
end

class IntegrationTest
  def run_tests
    puts "=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç FileTreeAdapter + TreeView ==="
    
    test_adapter
    test_adapter_with_mock_tree_view
    
    puts "‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
  end
  
  private
  
  def test_adapter
    puts "üìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FileTreeAdapter..."
    
    adapter = FileTreeAdapter.new(Dir.pwd)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    root_items = adapter.get_root_items
    assert !root_items.empty?, "Root items –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
    
    dir_item = root_items.find { |item| item.directory? && !item.parent_directory? }
    assert dir_item, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
    
    assert adapter.can_expand?(dir_item), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è"
    
    children = adapter.get_children(dir_item)
    assert children.is_a?(Array), "–î–µ—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    assert !adapter.state.expanded?(dir_item), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
    
    adapter.toggle_expand(dir_item)
    assert adapter.state.expanded?(dir_item), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ toggle"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ
    flat_tree = adapter.get_flat_tree
    assert flat_tree.is_a?(Array), "–ü–ª–æ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º"
    assert flat_tree.all? { |item, level| item.respond_to?(:name) && level.is_a?(Integer) }, "–≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–∫—Ä—ã—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–µ–π
    levels = flat_tree.map { |item, level| level }
    assert levels.include?(1), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É—Ä–æ–≤–Ω—è 1"
    
    puts "‚úÖ FileTreeAdapter —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
  end
  
  def test_adapter_with_mock_tree_view
    puts "üå≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TreeView..."
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    adapter = FileTreeAdapter.new(Dir.pwd)
    mock_source = MockTreeDataSource.new
    
    # –û–±–∞ –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    [:get_root_items, :get_children, :can_expand?].each do |method|
      assert adapter.respond_to?(method), "Adapter –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å #{method}"
      assert mock_source.respond_to?(method), "MockSource –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å #{method}"
    end
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ adapter –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã
    root_items = adapter.get_root_items
    assert root_items.all? { |item| item.respond_to?(:name) && item.respond_to?(:type) }, "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å name –∏ type"
    
    puts "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TreeView –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
  end
  
  def assert(condition, message)
    raise "Assertion failed: #{message}" unless condition
  end
end

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if __FILE__ == $0
  test = IntegrationTest.new
  test.run_tests
end 