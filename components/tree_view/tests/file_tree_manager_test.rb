#!/usr/bin/env ruby

require 'tmpdir'
require 'fileutils'
require_relative '../src/file_tree_manager'
require_relative '../src/file_tree_item'
require_relative '../src/file_tree_state'

class FileTreeManagerTest
  def initialize
    @test_dir = nil
    @manager = nil
  end
  
  def run_tests
    puts "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FileTreeManager ==="
    
    setup_test_directory
    
    test_initialization
    test_root_items
    test_sorting
    test_children
    test_expansion
    test_flat_tree
    test_directory_navigation
    test_item_types
    
    cleanup_test_directory
    
    puts "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
  end
  
  private
  
  def setup_test_directory
    @test_dir = Dir.mktmpdir('file_tree_test')
    puts "üîß –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥: #{@test_dir}"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    FileUtils.mkdir_p(File.join(@test_dir, 'lib', 'core'))
    FileUtils.mkdir_p(File.join(@test_dir, 'lib', 'ui'))
    FileUtils.mkdir_p(File.join(@test_dir, 'test'))
    FileUtils.mkdir_p(File.join(@test_dir, 'assets'))
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    File.write(File.join(@test_dir, 'README.md'), 'test')
    File.write(File.join(@test_dir, 'app.rb'), 'test')
    File.write(File.join(@test_dir, 'lib', 'core', 'manager.rb'), 'test')
    File.write(File.join(@test_dir, 'lib', 'ui', 'window.rb'), 'test')
    File.write(File.join(@test_dir, 'test', 'test_file.rb'), 'test')
    
    @manager = FileTreeManager.new(@test_dir)
  end
  
  def cleanup_test_directory
    FileUtils.rm_rf(@test_dir) if @test_dir
    puts "üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥"
  end
  
  def test_initialization
    assert @manager.state.current_directory == @test_dir, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
    assert @manager.state.expanded_items.empty?, "Expanded items –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
    assert @manager.state.selected_item.nil?, "Selected item –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil"
    puts "‚úÖ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def test_root_items
    items = @manager.get_root_items
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
    assert !items.empty?, "Root items –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    parent_item = items.find { |item| item.parent_directory? }
    assert parent_item, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    assert parent_item.name == '..', "–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '..'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    names = items.map(&:name)
    assert names.include?('lib'), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'lib'"
    assert names.include?('test'), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'test'"
    assert names.include?('README.md'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª 'README.md'"
    assert names.include?('app.rb'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª 'app.rb'"
    
    puts "‚úÖ –¢–µ—Å—Ç root items –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def test_sorting
    items = @manager.get_root_items
    
    # –£–±–∏—Ä–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    items_without_parent = items.reject(&:parent_directory?)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
    dirs = items_without_parent.select(&:directory?)
    files = items_without_parent.select(&:file?)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
    combined = dirs + files
    actual_order = items_without_parent.map(&:name)
    expected_order = combined.map(&:name)
    
    assert actual_order == expected_order, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: #{actual_order} != #{expected_order}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    dir_names = dirs.map(&:name)
    sorted_dirs = dir_names.sort_by(&:downcase)
    assert dir_names == sorted_dirs, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: #{dir_names} != #{sorted_dirs}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–æ–≤
    file_names = files.map(&:name)
    sorted_files = file_names.sort_by(&:downcase)
    assert file_names == sorted_files, "–§–∞–π–ª—ã –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: #{file_names} != #{sorted_files}"
    
    puts "‚úÖ –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def test_children
    items = @manager.get_root_items
    lib_item = items.find { |item| item.name == 'lib' }
    
    assert lib_item, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç 'lib'"
    assert lib_item.can_expand?, "–≠–ª–µ–º–µ–Ω—Ç 'lib' –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è"
    
    children = @manager.get_children(lib_item)
    assert !children.empty?, "–î–µ—Ç–∏ 'lib' –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
    
    names = children.map(&:name)
    assert names.include?('core'), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'core'"
    assert names.include?('ui'), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'ui'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –¥–µ—Ç—è—Ö
    assert !children.any?(&:parent_directory?), "–í –¥–µ—Ç—è—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    
    puts "‚úÖ –¢–µ—Å—Ç children –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def test_expansion
    items = @manager.get_root_items
    lib_item = items.find { |item| item.name == 'lib' }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    assert !@manager.state.expanded?(lib_item), "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
    
    # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º
    @manager.toggle_expand(lib_item)
    assert @manager.state.expanded?(lib_item), "–≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç –ø–æ—Å–ª–µ toggle"
    
    # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
    @manager.toggle_expand(lib_item)
    assert !@manager.state.expanded?(lib_item), "–≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–µ—Ä–Ω—É—Ç –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ toggle"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –º–µ—Ç–æ–¥—ã
    @manager.state.expand(lib_item)
    assert @manager.state.expanded?(lib_item), "–≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç –ø–æ—Å–ª–µ expand"
    
    @manager.state.collapse(lib_item)
    assert !@manager.state.expanded?(lib_item), "–≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–µ—Ä–Ω—É—Ç –ø–æ—Å–ª–µ collapse"
    
    puts "‚úÖ –¢–µ—Å—Ç expansion –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def test_flat_tree
    items = @manager.get_root_items
    lib_item = items.find { |item| item.name == 'lib' }
    
    # –ë–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    flat_tree = @manager.get_flat_tree
    assert flat_tree.all? { |item, level| level == 0 }, "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ 0"
    
    # –° —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º
    @manager.toggle_expand(lib_item)
    flat_tree = @manager.get_flat_tree
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    levels = flat_tree.map { |item, level| level }
    assert levels.include?(0), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É—Ä–æ–≤–Ω—è 0"
    assert levels.include?(1), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É—Ä–æ–≤–Ω—è 1"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ - lib –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º–∏ –¥–µ—Ç—å–º–∏
    lib_index = flat_tree.find_index { |item, level| item.name == 'lib' }
    core_index = flat_tree.find_index { |item, level| item.name == 'core' }
    ui_index = flat_tree.find_index { |item, level| item.name == 'ui' }
    
    assert lib_index < core_index, "lib –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ core"
    assert core_index < ui_index, "core –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ ui"
    assert lib_index + 1 == core_index, "core –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ lib"
    
    puts "‚úÖ –¢–µ—Å—Ç flat tree –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def test_directory_navigation
    items = @manager.get_root_items
    lib_item = items.find { |item| item.name == 'lib' }
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    @manager.change_directory(lib_item.path)
    
    assert @manager.state.current_directory == lib_item.path, "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"
    assert @manager.state.expanded_items.empty?, "Expanded items –¥–æ–ª–∂–Ω—ã –æ—á–∏—Å—Ç–∏—Ç—å—Å—è"
    assert @manager.state.selected_item.nil?, "Selected item –¥–æ–ª–∂–µ–Ω –æ—á–∏—Å—Ç–∏—Ç—å—Å—è"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ root items
    new_items = @manager.get_root_items
    names = new_items.map(&:name)
    assert names.include?('..'), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
    assert names.include?('core'), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'core'"
    assert names.include?('ui'), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'ui'"
    
    puts "‚úÖ –¢–µ—Å—Ç directory navigation –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def test_item_types
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    @manager.change_directory(@test_dir)
    
    items = @manager.get_root_items
    
    parent_item = items.find(&:parent_directory?)
    dir_item = items.find { |item| item.directory? && !item.parent_directory? }
    file_item = items.find(&:file?)
    
    puts "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:"
    items.each { |item| puts "  #{item.name} (#{item.type})" }
    
    assert parent_item, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å parent item"
    assert dir_item, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å directory item"
    assert file_item, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å file item"
    
    assert parent_item.parent_directory?, "Parent item –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å parent_directory?"
    assert !parent_item.can_expand?, "Parent item –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è"
    
    assert dir_item.directory?, "Directory item –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å directory?"
    assert dir_item.can_expand?, "Directory item –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è"
    
    assert file_item.file?, "File item –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å file?"
    assert !file_item.can_expand?, "File item –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è"
    
    puts "‚úÖ –¢–µ—Å—Ç item types –ø—Ä–æ–π–¥–µ–Ω"
  end
  
  def assert(condition, message)
    raise "Assertion failed: #{message}" unless condition
  end
end

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if __FILE__ == $0
  test = FileTreeManagerTest.new
  test.run_tests
end 