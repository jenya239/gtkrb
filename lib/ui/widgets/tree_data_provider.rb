#!/usr/bin/env ruby

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞
class TreeDataProvider
  def get_items(path)
    raise NotImplementedError, "#{self.class} must implement get_items"
  end
  
  def get_children(item)
    raise NotImplementedError, "#{self.class} must implement get_children"
  end
  
  def can_expand?(item)
    raise NotImplementedError, "#{self.class} must implement can_expand?"
  end
  
  def get_icon(item)
    raise NotImplementedError, "#{self.class} must implement get_icon"
  end
  
  def get_text(item)
    raise NotImplementedError, "#{self.class} must implement get_text"
  end
end

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
class FileSystemDataProvider < TreeDataProvider
  def get_items(path)
    items = []
    
    # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    parent = File.dirname(path)
    if parent != path
      items << TreeItem.new(name: "..", path: "..", type: :parent, level: 0)
    end
    
    # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    items << TreeItem.new(name: File.basename(path), path: path, type: :current, level: 0)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Dir.children(path).sort.each do |entry|
      next if entry.start_with?('.')
      full_path = File.join(path, entry)
      
      if File.directory?(full_path)
        items << TreeItem.new(name: entry, path: full_path, type: :directory, level: 1)
      else
        items << TreeItem.new(name: entry, path: full_path, type: :file, level: 1)
      end
    end
    
    items
  end
  
  def get_children(item)
    return nil unless item.directory?
    return nil if item.type == :parent
    
    get_items(item.path)
  end
  
  def can_expand?(item)
    item.directory? && item.type != :parent
  end
  
  def get_icon(item)
    case item.type
    when :parent then TreeViewTheme::ICON_UP
    when :directory, :current then TreeViewTheme::ICON_FOLDER
    else TreeViewTheme::ICON_FILE
    end
  end
  
  def get_text(item)
    item.name
  end
end

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
class GitDataProvider < TreeDataProvider
  def initialize(repo_path)
    @repo_path = repo_path
  end
  
  def get_items(path)
    items = []
    
    # Git —Å—Ç–∞—Ç—É—Å
    items << TreeItem.new(name: "üìä Status", path: "git:status", type: :git_status, level: 0)
    items << TreeItem.new(name: "üåø Branches", path: "git:branches", type: :git_branches, level: 0)
    items << TreeItem.new(name: "üìù Commits", path: "git:commits", type: :git_commits, level: 0)
    
    # –§–∞–π–ª—ã —Å —É—á–µ—Ç–æ–º Git
    get_git_files(path).each do |file|
      items << file
    end
    
    items
  end
  
  def get_children(item)
    case item.type
    when :git_branches then get_branches
    when :git_commits then get_commits
    else nil
    end
  end
  
  def can_expand?(item)
    [:git_branches, :git_commits, :directory].include?(item.type)
  end
  
  def get_icon(item)
    case item.type
    when :git_status then "üìä"
    when :git_branches then "üåø"
    when :git_commits then "üìù"
    when :directory then TreeViewTheme::ICON_FOLDER
    else TreeViewTheme::ICON_FILE
    end
  end
  
  def get_text(item)
    item.name
  end
  
  private
  
  def get_git_files(path)
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    []
  end
  
  def get_branches
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    []
  end
  
  def get_commits
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    []
  end
end 