require 'gtk3'
require 'vte3'
require_relative 'code_editor'
require_relative 'file_tree_panel'

class EditorPane
  attr_reader :pane_id

  def initialize
    @pane_id = "pane_#{object_id}"
    @box = Gtk::Box.new(:vertical, 0)
    @current_editor = CodeEditor.new
    @current_file = nil
    @on_focus_callback = nil
    @on_modified_callback = nil
    @on_button_callback = nil
    @on_close_callback = nil
    @on_split_h_callback = nil
    @on_split_v_callback = nil
    @on_new_file_callback = nil
    @on_terminal_callback = nil
    @is_new_file = true
    @original_temp_file = nil
    @on_file_saved_callback = nil
    @on_history_callback = nil
    @on_lose_focus_callback = nil
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    @terminal_mode = false
    @terminal = nil
    @terminal_widget = nil
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞
    @file_tree_mode = false
    @file_tree = nil
    @file_tree_widget = nil
    @file_tree_callback = nil
    
    # –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    @file_history = []
    @max_history_size = 20
    
    setup_ui
    setup_new_file
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å–∫—Ä—ã—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    ensure_correct_display_state
  end

  def widget
    @box
  end

  def load_file(file_path)
    @current_file = file_path
    @is_new_file = false
    @current_editor.load_file(file_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_to_history(file_path)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    @current_editor.on_save_request { handle_save_request }
    
    update_file_label
    emit_focus
  end

  def load_new_file_content(content)
    @current_file = nil
    @is_new_file = true
    @current_editor.set_content(content)
    update_file_label
    emit_focus
  end

  def get_current_editor
    @current_editor
  end

  def get_current_file
    @current_file
  end

  def has_file?
    !@current_file.nil? && !@is_new_file
  end

  def on_focus(&block)
    @on_focus_callback = block
  end

  def on_modified(&block)
    @on_modified_callback = block
  end

  def on_button(&block)
    @on_button_callback = block
  end

  def on_close(&block)
    @on_close_callback = block
  end

  def on_split_horizontal(&block)
    @on_split_h_callback = block
  end

  def on_split_vertical(&block)
    @on_split_v_callback = block
  end

  def on_new_file(&block)
    @on_new_file_callback = block
  end

  def on_save(&block)
    @on_save_callback = block
  end

  def on_file_saved(&block)
    @on_file_saved_callback = block
  end

  def on_history(&block)
    @on_history_callback = block
  end

  def on_lose_focus(&block)
    @on_lose_focus_callback = block
  end

  def on_terminal(&block)
    @on_terminal_callback = block
  end

  def get_working_directory
    if @current_file && File.exist?(@current_file)
      File.dirname(@current_file)
    else
      Dir.pwd
    end
  end

  def show_terminal(working_dir)
    return if @terminal_mode
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    unless @terminal
      @terminal = Vte::Terminal.new
      @terminal.set_size(80, 24)
      @terminal.set_scrollback_lines(1000)
      
      # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
      @terminal_widget = Gtk::ScrolledWindow.new
      @terminal_widget.set_policy(:never, :automatic)
      @terminal_widget.add(@terminal)
      @terminal_widget.set_hexpand(true)
      @terminal_widget.set_vexpand(true)
      
      # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∫–∞
      @box.pack_start(@terminal_widget, expand: true, fill: true, padding: 0)
    end
    
    # –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    @current_editor.widget.hide
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
    @terminal_widget.show_all
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º shell –≤ –Ω—É–∂–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
    begin
      @terminal.spawn_sync(
        0,
        working_dir,
        [ENV['SHELL'] || '/bin/bash'],
        nil,
        0
      )
      puts "Terminal spawned successfully in #{working_dir}"
    rescue => e
      puts "Failed to spawn terminal: #{e.message}"
      # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
      @terminal.feed_child("cd #{working_dir}\n")
    end
    
    @terminal_mode = true
    @terminal.grab_focus
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É
    update_terminal_label(working_dir)
    update_type_button
  end

  def hide_terminal
    return unless @terminal_mode
    
    # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª (–Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
    @terminal_widget.hide if @terminal_widget
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    @current_editor.widget.show
    
    @terminal_mode = false
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É
    update_file_label
    update_type_button
  end

  def terminal_mode?
    @terminal_mode
  end

  def show_file_tree(path = Dir.pwd)
    return if @file_tree_mode
    
    begin
      # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if @file_tree.nil?
        @file_tree = FileTreePanel.new(path)
        @file_tree_widget = @file_tree.widget
        @box.pack_start(@file_tree_widget, expand: true, fill: true, padding: 0)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        @file_tree.on_directory_changed do |new_path|
          update_file_tree_label(new_path)
        end
      else
        @file_tree.change_directory(path)
      end
      
      # –ü–æ–¥–∫–ª—é—á–∞–µ–º callback –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–æ –ª–∏ –¥–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–Ω–æ–≤–æ
      if @file_tree_callback
        @file_tree.on_file_selected do |file_path|
          emit_lose_focus  # –°–∫—Ä—ã–≤–∞–µ–º popup –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Ñ–∞–π–ª—É
          @file_tree_callback.call(file_path)
        end
      end
      
      # –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª
      @current_editor.widget.hide
      @terminal_widget.hide if @terminal_widget
      
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
      @file_tree_widget.show_all
      @file_tree_mode = true
      @terminal_mode = false
      
      # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É
      update_file_tree_label(path)
      update_type_button
    rescue => e
      puts "ERROR in show_file_tree: #{e.message}"
      puts e.backtrace
    end
  end

  def hide_file_tree
    return unless @file_tree_mode
    
    # –°–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
    @file_tree_widget.hide if @file_tree_widget
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    @current_editor.widget.show
    
    @file_tree_mode = false
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É
    update_file_label
    update_type_button
  end

  def file_tree_mode?
    @file_tree_mode
  end
  
  def toggle_panel_type
    if @file_tree_mode
      # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–∑ –¥–µ—Ä–µ–≤–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
      hide_file_tree
      update_type_button
    elsif @terminal_mode
      # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
      hide_terminal
      update_type_button
    else
      # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ –¥–µ—Ä–µ–≤–æ
      show_file_tree
      update_type_button
    end
  end
  
  def update_type_button
    if @file_tree_mode
      @type_switch_label.set_text("üìÅ")
      @type_switch_label.override_color(:normal, Gdk::RGBA::new(0.4, 0.8, 0.4, 1.0))
    elsif @terminal_mode
      @type_switch_label.set_text("‚öë")
      @type_switch_label.override_color(:normal, Gdk::RGBA::new(0.8, 0.4, 0.4, 1.0))
    else
      @type_switch_label.set_text("üìù")
      @type_switch_label.override_color(:normal, Gdk::RGBA::new(0.4, 0.4, 0.8, 1.0))
    end
  end
  
  def current_file
    @current_file
  end
  
  def is_new_file
    @is_new_file
  end
  
  def set_file_tree_callback(&block)
    @file_tree_callback = block
  end

  def toggle_terminal
    if @terminal_mode
      hide_terminal
    else
      working_dir = get_working_directory
      show_terminal(working_dir)
    end
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    ensure_correct_display_state
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
    update_terminal_button_icon
  end

  def update_terminal_button_icon
    # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
    terminal_button = @buttons_box.children.find { |child| 
      child.instance_variable_get(:@action) == :terminal rescue false
    }
    
    if terminal_button
      button_label = terminal_button.children.first
      if @terminal_mode
        button_label.text = "üìù"  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
      else
        button_label.text = "‚åò"   # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
      end
    end
  end

  def get_file_history
    @file_history.dup
  end

  def add_to_history(file_path)
    return unless file_path && File.exist?(file_path)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
    @file_history.delete(file_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
    @file_history.unshift(file_path)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    @file_history = @file_history.first(@max_history_size)
  end

  def clear_history
    @file_history.clear
  end

  def ensure_correct_display_state
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if @terminal_mode
      # –î–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–µ—Ä–º–∏–Ω–∞–ª
      @current_editor.widget.hide
      @file_tree_widget.hide if @file_tree_widget
      @terminal_widget.show_all if @terminal_widget
    elsif @file_tree_mode
      # –î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ñ–∞–π–ª–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
      @current_editor.widget.hide
      @terminal_widget.hide if @terminal_widget
      @file_tree_widget.show_all if @file_tree_widget
    else  
      # –î–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–¥–∞–∫—Ç–æ—Ä
      @terminal_widget.hide if @terminal_widget
      @file_tree_widget.hide if @file_tree_widget
      @current_editor.widget.show_all
    end
  end

  def set_focus
    if @file_tree_mode && @file_tree_widget
      @file_tree_widget.grab_focus
    elsif @terminal_mode && @terminal
      @terminal.grab_focus
    else
      @current_editor.widget.grab_focus
    end
  end

  def set_active_style
    @box.override_background_color(:normal, Gdk::RGBA::new(0.25, 0.25, 0.25, 1.0))
  end

  def set_inactive_style
    @box.override_background_color(:normal, Gdk::RGBA::new(0.2, 0.2, 0.2, 1.0))
  end

  def is_new_file?
    @is_new_file
  end

  def swap_editors_with(other_pane)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    my_editor = @current_editor
    my_file = @current_file
    my_is_new = @is_new_file
    
    other_editor = other_pane.get_current_editor
    other_file = other_pane.get_current_file
    other_is_new = other_pane.is_new_file?
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –æ—Ç –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    my_parent = my_editor.widget.parent
    my_parent.remove(my_editor.widget) if my_parent
    
    other_parent = other_editor.widget.parent
    other_parent.remove(other_editor.widget) if other_parent
    
    # –û–±–º–µ–Ω–∏–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
    @current_editor = other_editor
    @current_file = other_file
    @is_new_file = other_is_new
    
    other_pane.instance_variable_set(:@current_editor, my_editor)
    other_pane.instance_variable_set(:@current_file, my_file)
    other_pane.instance_variable_set(:@is_new_file, my_is_new)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –≤ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    @box.pack_start(@current_editor.widget, expand: true, fill: true, padding: 0)
    other_pane.instance_variable_get(:@box).pack_start(my_editor.widget, expand: true, fill: true, padding: 0)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    update_file_label
    other_pane.update_file_label
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    @current_editor.on_modified { emit_modified }
    my_editor.on_modified { other_pane.emit_modified }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
    @current_editor.widget.show_all
    my_editor.widget.show_all
  end

  def get_swap_data
    editor = @current_editor
    result = {
      file_path: @current_file,
      content: editor.get_content,
      cursor_position: editor.get_cursor_position,
      language: editor.instance_variable_get(:@language)
    }
    result
  end

  def apply_swap_data(data)
    editor = @current_editor
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
    old_file = @current_file
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    @current_file = data[:file_path]
    @is_new_file = false
    
    editor.set_content(data[:content])
    editor.set_cursor_position(data[:cursor_position]) if data[:cursor_position]
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    @current_editor.on_save_request { handle_save_request }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    update_file_label
    
    result
  end

  private

  def setup_ui
    # –ü–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
    @file_info_box = Gtk::Box.new(:horizontal, 8)
    @file_info_box.set_margin_left(8)
    @file_info_box.set_margin_right(8)
    @file_info_box.set_margin_top(3)
    @file_info_box.set_margin_bottom(3)
    
    # –ü—É—Ç—å —Ñ–∞–π–ª–∞
    @file_label = Gtk::Label.new("No file opened")
    @file_label.set_xalign(0.0)
    @file_label.set_ellipsize(:middle)
    @file_label.override_font(Pango::FontDescription.new('Monospace 8'))
    @file_info_box.pack_start(@file_label, expand: true, fill: true, padding: 0)
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    @buttons_box = Gtk::Box.new(:horizontal, 2)
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–∞–Ω–µ–ª–∏
    @type_switch_label = Gtk::Label.new("üìÅ")
    @type_switch_label.set_size_request(12, 12)
    @type_switch_label.override_font(Pango::FontDescription.new('Sans 8'))
    @type_switch_label.override_color(:normal, Gdk::RGBA::new(0.4, 0.8, 0.4, 1.0))
    
    @type_switch_button = Gtk::EventBox.new
    @type_switch_button.add(@type_switch_label)
    @type_switch_button.set_size_request(12, 12)
    @type_switch_button.signal_connect('button-press-event') do |widget, event|
      toggle_panel_type
      true
    end
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    @test_button_label = Gtk::Label.new("‚ñ†")
    @test_button_label.set_size_request(12, 12)
    @test_button_label.override_font(Pango::FontDescription.new('Sans 8'))
    @test_button_label.override_color(:normal, Gdk::RGBA::new(0.6, 0.6, 0.6, 1.0))
    
    @test_button = Gtk::EventBox.new
    @test_button.add(@test_button_label)
    @test_button.set_size_request(12, 12)
    @test_button.signal_connect('button-press-event') do |widget, event|
      @on_button_callback.call(self) if @on_button_callback
      true
    end
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    @buttons_box.pack_start(@type_switch_button, false, false, 0)
    @buttons_box.pack_start(@test_button, false, false, 0)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    create_button("‚äû", :new_file)     # –ù–æ–≤—ã–π —Ñ–∞–π–ª
    create_button("‚ùô", :split_h)      # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    create_button("‚ïê", :split_v)      # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    create_button("‚è∑", :history)      # –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤
    create_button("‚åò", :terminal)     # –¢–µ—Ä–º–∏–Ω–∞–ª
    create_button("‚úó", :close)        # –ó–∞–∫—Ä—ã—Ç—å
    
    @file_info_box.pack_end(@buttons_box, expand: false, fill: false, padding: 2)
    
    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    style_file_info_box
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    @box.pack_start(@file_info_box, expand: false, fill: true, padding: 0)
    @box.pack_start(@current_editor.widget, expand: true, fill: true, padding: 0)
    
    # –í–∞–∂–Ω–æ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏
    @current_editor.widget.show_all
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    @current_editor.on_modified do
      emit_modified
      update_file_label
    end
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ñ–æ–∫—É—Å–∞
    @box.signal_connect('button-press-event') do |widget, event|
      emit_focus
      emit_lose_focus
      false
    end
    
    @current_editor.widget.signal_connect('button-press-event') do |widget, event|
      emit_focus
      emit_lose_focus
      false
    end
  end

  def style_file_info_box
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ CSS
    @file_info_box.override_background_color(:normal, Gdk::RGBA::new(0.18, 0.18, 0.18, 1.0))
    @file_label.override_color(:normal, Gdk::RGBA::new(0.9, 0.9, 0.9, 1.0))
  end

  public
  
  def update_file_label
    puts "update_file_label: file=#{@current_file}, is_new=#{@is_new_file}, modified=#{@current_editor.modified?}"
    
    if @current_file && !@is_new_file
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å —Ç—Ä–æ–µ—Ç–æ—á–∏–µ–º –µ—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç
      display_path = truncate_path(@current_file, 50)
      
      # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if @current_editor.modified?
        display_path += " *"
      end
      
      @file_label.text = display_path
      @file_label.set_tooltip_text(@current_file)
      puts "Setting label to: #{display_path}"
    else
      label_text = @is_new_file ? "Untitled" : "No file opened"
      
      # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
      if @is_new_file && @current_editor.modified?
        label_text += " *"
      end
      
      @file_label.text = label_text
      @file_label.set_tooltip_text("")
      puts "Setting label to: #{label_text}"
    end
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
    @file_label.queue_draw
    @file_info_box.queue_draw
  end

  def update_terminal_label(working_dir)
    if @terminal_mode
      @file_label.text = "Terminal - #{File.basename(working_dir)}"
      @file_label.set_tooltip_text("Terminal - #{working_dir}")
    end
  end

  def update_file_tree_label(path)
    if @file_tree_mode
      @file_label.text = "File Tree - #{File.basename(path)}"
      @file_label.set_tooltip_text("File Tree - #{path}")
    end
  end

  private

  def emit_focus
    @on_focus_callback.call(self) if @on_focus_callback
  end

  def emit_lose_focus
    @on_lose_focus_callback.call if @on_lose_focus_callback
  end

  public
  
  def emit_modified
    @on_modified_callback.call if @on_modified_callback
  end

  private

  def setup_new_file
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    @original_temp_file = "/tmp/untitled_#{Time.now.to_i}.txt"
    File.write(@original_temp_file, "")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    @current_editor.on_save_request { handle_save_request }
  end

  def handle_save_request
    if @is_new_file
      request_save_as
    else
      request_save
    end
  end

  def request_save
    return unless @current_file
    
    begin
      content = @current_editor.get_content
      File.write(@current_file, content)
      @current_editor.reset_modified
      update_file_label
      @on_file_saved_callback.call(@current_file) if @on_file_saved_callback
      puts "File saved: #{@current_file}"
    rescue => e
      puts "Error saving file: #{e.message}"
    end
  end

  def request_save_as
    @on_save_callback.call(self) if @on_save_callback
  end

  public
  
  def mark_as_saved(file_path)
    @current_file = file_path
    @is_new_file = false
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if @original_temp_file && File.exist?(@original_temp_file)
      File.delete(@original_temp_file)
      @original_temp_file = nil
    end
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    @current_editor.on_save_request { handle_save_request }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    update_file_label
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Ñ–∞–π–ª–æ–≤
    @on_file_saved_callback.call(file_path) if @on_file_saved_callback
  end

  def create_button(icon, action)
    button_label = Gtk::Label.new(icon)
    button_label.set_size_request(12, 12)
    button_label.override_font(Pango::FontDescription.new('Sans 8'))
    button_label.override_color(:normal, Gdk::RGBA::new(0.6, 0.6, 0.6, 1.0))

    button = Gtk::EventBox.new
    button.add(button_label)
    button.set_size_request(12, 12)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º action –¥–ª—è –ø–æ–∏—Å–∫–∞
    button.instance_variable_set(:@action, action)
    
    button.signal_connect('button-press-event') do |widget, event|
      case action
      when :new_file
        @on_new_file_callback.call(self) if @on_new_file_callback
      when :split_h
        @on_split_h_callback.call(self) if @on_split_h_callback
      when :split_v
        @on_split_v_callback.call(self) if @on_split_v_callback
      when :history
        @on_history_callback.call(self) if @on_history_callback
      when :terminal
        toggle_terminal
      when :close
        @on_close_callback.call(self) if @on_close_callback
      end
      true
    end

    # –≠—Ñ—Ñ–µ–∫—Ç hover
    button.signal_connect('enter-notify-event') do
      button_label.override_color(:normal, Gdk::RGBA::new(0.9, 0.9, 0.9, 1.0))
    end

    button.signal_connect('leave-notify-event') do
      button_label.override_color(:normal, Gdk::RGBA::new(0.6, 0.6, 0.6, 1.0))
    end

    @buttons_box.pack_start(button, expand: false, fill: false, padding: 0)
  end

  private

  def truncate_path(path, max_length)
    return path if path.length <= max_length
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø—É—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º ... –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
    start_length = max_length / 2 - 2
    end_length = max_length - start_length - 3
    
    path[0...start_length] + "..." + path[-end_length..-1]
  end
end 